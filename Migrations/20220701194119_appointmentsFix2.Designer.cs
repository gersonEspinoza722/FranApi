// <auto-generated />
using System;
using FranChallenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FranChallenge.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220701194119_appointmentsFix2")]
    partial class appointmentsFix2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FranChallenge.Models.Appointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("officeId")
                        .HasColumnType("integer");

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("officeId");

                    b.HasIndex("patientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("FranChallenge.Models.AppointmentOffice", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("AppointmentOffices");
                });

            modelBuilder.Entity("FranChallenge.Models.AppointmentPatient", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("AppointmentPatients");
                });

            modelBuilder.Entity("FranChallenge.Models.Doctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FranChallenge.Models.Office", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("officeNumber")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("FranChallenge.Models.Patient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("FranChallenge.Models.Appointment", b =>
                {
                    b.HasOne("FranChallenge.Models.Office", "office")
                        .WithMany()
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranChallenge.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("office");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("FranChallenge.Models.AppointmentOffice", b =>
                {
                    b.HasOne("FranChallenge.Models.Appointment", "Appointment")
                        .WithMany("AppointmentOffices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranChallenge.Models.Office", "Office")
                        .WithMany("AppointmentOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("FranChallenge.Models.AppointmentPatient", b =>
                {
                    b.HasOne("FranChallenge.Models.Appointment", "Appointment")
                        .WithMany("AppointmentPatients")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FranChallenge.Models.Patient", "Patient")
                        .WithMany("AppointmentPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FranChallenge.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentOffices");

                    b.Navigation("AppointmentPatients");
                });

            modelBuilder.Entity("FranChallenge.Models.Office", b =>
                {
                    b.Navigation("AppointmentOffices");
                });

            modelBuilder.Entity("FranChallenge.Models.Patient", b =>
                {
                    b.Navigation("AppointmentPatients");
                });
#pragma warning restore 612, 618
        }
    }
}
